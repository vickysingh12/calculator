{"version":3,"sources":["components/Button.js","components/Calculator.js","components/FormulaScreen.js","components/OutputScreen.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","onClick","maxCount","changeValue","value","className","Calculator","useState","outputScreenValue","setOutputScreenValue","formulaScreenValue","setFormulaScreenValue","maxdigits","setMaxdigits","result","checkmaxCount","String","length","console","log","changeValueOutputScreen","valuefrombtn","checkCount","storedValue","setTimeout","eval","includes","pos","slice","indexOf","FormulaScreen","OutputScreen","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1015c1b.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { useState } from 'react';\n\nexport default function Button(props) {\n\n    \n    function handleClick() {\n        const result =  props.maxCount()\n\n       if (result) {\n           props.changeValue(props.value)\n       }\n       else {\n           props.changeValue(props.value ,'max count')\n       }\n\n    }\n\n    return(\n        <button onClick={handleClick} className={props.className} value={props.value}>{props.value}</button>\n    )\n}","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport Button from './Button'\nimport FormulaScreen from './FormulaScreen'\nimport OutputScreen from './OutputScreen'\n\nexport default function Calculator(props) {\n\n    const [ outputScreenValue , setOutputScreenValue ] = useState('0')\n    const [ formulaScreenValue , setFormulaScreenValue ] = useState('')\n    const [ maxdigits , setMaxdigits ] = useState(24)\n    var result\n\n    function checkmaxCount() {    //function for checking max number of digits\n\n        if(String(outputScreenValue).length < maxdigits) {\n            console.log(\"count checked\")  \n            return true\n        }\n        else {\n            setOutputScreenValue('max count reached')\n            return false\n        }\n    }\n\n    function changeValueOutputScreen(valuefrombtn , checkCount) {  //changes outputfield values\n        \n        if(valuefrombtn == 'AC') {   //if AC button is pressed\n            setOutputScreenValue(0)\n            setFormulaScreenValue('')   \n            return          \n        }\n\n        if ( checkCount === 'max count') {  // if count reaches max\n            \n            let storedValue = outputScreenValue\n\n            setOutputScreenValue(checkCount) \n\n            setTimeout(function () {\n               setOutputScreenValue(storedValue) \n            },400)\n            return\n        }\n\n        if ( valuefrombtn == '=' ) {      // equal button pressed calculates result\n            result = formulaScreenValue\n            setFormulaScreenValue(formulaScreenValue + ' = '+eval(result) )   \n            setOutputScreenValue(eval(result))    \n            return\n\n        }\n        if (outputScreenValue == 0 ) {     // initial stage of output field\n           \n            setOutputScreenValue(valuefrombtn) \n            setFormulaScreenValue(valuefrombtn)              \n        \n        } else if (outputScreenValue == '-' | outputScreenValue == '+' | outputScreenValue == '*' | outputScreenValue == '/') {\n            \n            setOutputScreenValue(valuefrombtn)\n            setFormulaScreenValue(`${formulaScreenValue} ${valuefrombtn}`)  \n        }        \n        \n        else if (valuefrombtn == '+' | valuefrombtn == '-' | valuefrombtn == \"*\"  | valuefrombtn == '/' ){\n            if(String(formulaScreenValue).includes('=')) {\n\n                var pos = String(formulaScreenValue).slice(String(formulaScreenValue).indexOf(\"=\")+1)\n                setFormulaScreenValue(`${pos} ${valuefrombtn}`)\n                setOutputScreenValue(valuefrombtn)\n            }\n            else {          \n                setOutputScreenValue(valuefrombtn)                   \n                setFormulaScreenValue(formulaScreenValue+' ' + valuefrombtn)     \n            \n            }\n\n        }   else {\n                setOutputScreenValue(`${outputScreenValue}${valuefrombtn}`) \n                setFormulaScreenValue(`${formulaScreenValue}${valuefrombtn}`)            \n\n                if(String(formulaScreenValue).includes('=')) {\n\n                    setFormulaScreenValue(valuefrombtn)\n                    setOutputScreenValue(valuefrombtn)\n\n                }\n        }\n    }\n    \n\n    return( <>\n        <FormulaScreen value={formulaScreenValue}></FormulaScreen>\n        <OutputScreen  value={outputScreenValue}></OutputScreen>\n        <div className='buttonwrapper'>\n\n        <Button changeValue = {changeValueOutputScreen} maxCount={checkmaxCount} className='AC' value={'AC'}/>\n        <Button changeValue = {changeValueOutputScreen} maxCount={checkmaxCount} className='operationbtn' value={'/'}/>\n        <Button changeValue = {changeValueOutputScreen} maxCount={checkmaxCount} className='operationbtn' value={'*'}/>\n        <Button changeValue = {changeValueOutputScreen} maxCount={checkmaxCount} value={7}/>\n        <Button changeValue = {changeValueOutputScreen} maxCount={checkmaxCount} value={8}/>\n        <Button changeValue = {changeValueOutputScreen} maxCount={checkmaxCount} value={9}/>\n        <Button changeValue = {changeValueOutputScreen} maxCount={checkmaxCount} className='operationbtn' value={'-'}/>\n        <Button changeValue = {changeValueOutputScreen} maxCount={checkmaxCount} value={4}/>\n        <Button changeValue = {changeValueOutputScreen} maxCount={checkmaxCount} value={5}/>\n        <Button changeValue = {changeValueOutputScreen} maxCount={checkmaxCount} value={6}/>\n        <Button changeValue = {changeValueOutputScreen} maxCount={checkmaxCount} className='operationbtn' value={'+'}/>\n        <Button changeValue = {changeValueOutputScreen} maxCount={checkmaxCount} value={1}/>\n        <Button changeValue = {changeValueOutputScreen} maxCount={checkmaxCount} value={2}/>\n        <Button changeValue = {changeValueOutputScreen} maxCount={checkmaxCount} value={3}/>\n        <Button changeValue = {changeValueOutputScreen} maxCount={checkmaxCount} className='operationbtn' className='equalbtn' value={'='}/>\n        <Button changeValue = {changeValueOutputScreen} maxCount={checkmaxCount} className='zerobtn' value={0}/>\n        <Button changeValue = {changeValueOutputScreen} maxCount={checkmaxCount}  value={'.'}/>  \n    </div>          \n    </>\n    )\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nexport default function FormulaScreen(props) {\n    return(\n        <div className='formulaScreen'> {props.value}</div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nexport default function OutputScreen(props) {\n    return(\n        <div className='outputScreen'>{props.value}</div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport Calculator from './components/Calculator'\nimport { useState } from 'react';\n\nexport default function App (props) {\n    const [count, setCount] = useState(0);\n\n\n\nreturn (<>\n    <div className='calculator'>\n        <Calculator className='calculator'></Calculator>\n    </div>\n   </>\n)\n\n\n\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}